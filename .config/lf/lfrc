# vim: syntax=sh
# Preview
set previewer '~/.config/lf/scripts/preview'
set cleaner '~/.config/lf/scripts/clean_kitty'

# Basic Settings
set shell zsh
set shellopts '-euy'
set ifs "\n"
set mouse
set findlen 0
set smartcase
set info "size"
set period 1
set scrolloff 8
set nodrawbox
set icons true
set ignorecase true
set incsearch
set timefmt '_2 Jan 2006 15:04'
set promptfmt "\033[1;35m[ lf ] \033[1;32m%u \033[38;5;15min \033[34m%w\033[0m"
set dircounts
set truncatechar "â€¦"
set autoquit on

map sudo $(pkexec env EDITOR=nvim lf -config="$HOME/.config/lf/lfrc" -command 'set drawbox true')

%[ $LF_LEVEL -eq 1 ] || notify-send "Warning!" "You're in a nested lf instance!"

cmd on-cd &{{
    printf "\033]0; $(pwd | sed "s|$HOME|~|") - lf\007" > /dev/tty
}}

cmd autoratios ${{
    w=$(tput cols)
    if [ $w -le 60 ]; then
        lf -remote "send $id set nopreview"
        lf -remote "send $id set ratios 1"
    elif [ $w -le 80 ]; then
        lf -remote "send $id set ratios 1:2"
        lf -remote "send $id set preview"
    elif [ $w -le 160 ]; then
        lf -remote "send $id set ratios 1:2:3"
        lf -remote "send $id set preview"
    else
        lf -remote "send $id set ratios 2:3:5"
        lf -remote "send $id set preview"
    fi
}}
autoratios

# drag n drop

cmd dragndrop %{{
  ripdrag -H 460 -W 600 -x * 
}}

# opener script
cmd open $open "$f"

# decrypt gpg encryptes files
cmd decrypt !{{
    gpg --decrypt -o "${f%.*}" "$f"
}}

# verify signature
cmd check-sig !{{
    gpg --verify "$f"
}}

# encrypt file with gpg
cmd encrypt !{{
    printf "User ID for signing: "
    read local_uid
    gpg --encrypt --sign -u "$local_uid" -o "${f}.gpg"
}}

# encrypt file with gpg but armored
cmd encrypt-armored !{{
    printf "User ID for signing: "
    read local_uid
    gpg --encrypt --sign --armor -u "$local_uid" -o "${f}.asc"
}}

# make new directory
cmd mkdir %{{
    set -f
    printf " Directory Name: "
    read ans
    mkdir -p -- "$ans"
    mv -- $fs "$ans"
    lf -remote "send $id select \"$ans\""
}}

# make new file
cmd new %{{
	printf "File/Directory Name: "
	read ans
	
	# using zsh/csh style parameter substitution
  dir="$(echo "$ans" | grep -o '.*/')"
	file=${ans##*/}
	focus=${ans%%/*}

	[ -z $dir ] || mkdir -p "$dir"
	[ -z $file ] || touch "$ans"

	lf -remote "send $id :select $focus; reload"
}}

# change permission
cmd chmod %{{
   IFS=$'\n'
   printf "$(stat -c " %a \033[32mMode Bits: \033[0m" $f)"
   read ans

   chmod "$ans" $fx

   lf -remote 'send unselect'
   lf -remote 'send reload'
}}

# make new file with privileges
cmd sudomkfile ${{
    printf "File Name: "
    read ans
    pkexec touch $ans
    sudoedit $ans
}}

# rename current dir files
cmd bulk-rename ${{
    vimv --git -- *

    lf -remote "send $id load"
    lf -remote "send $id unselect"
}}

# move in file system with fzf
cmd fzf_jump ${{
    res="$(fd . -H --maxdepth=8 --exclude .git --exclude .cache | fzf --reverse --header='Jump to location')" || exit 0
    if [ -f "$res" ]; then
        cmd="select"
        lf -remote "send $id $cmd \"$res\""
        lf -remote "send $id open"
    elif [ -d "$res" ]; then
        cmd="cd"
        lf -remote "send $id $cmd \"$res\""
    fi
    lf -remote "send $id 'redraw'"
}}

# extract archive
cmd extract ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n\t" "$fx"
	printf "extract? [y/N]"
	read ans
	[ $ans = "y" ] && extract $fx
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

# compress current file or selected files with tar and gunzip
cmd targz ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# open dua in current dir
cmd du !dua i "${f%/*}"

# Trash cli bindings
cmd trash ${{
    files=$(printf "$fx" | tr '\n' ';')
    while [ "$files" ]; do
        file=${files%%;*}
        trash-put "$(basename "$file")"
        if [ "$files" = "$file" ]; then
            files=''
        else
            files="${files#*;}"
        fi
    done
}}
cmd clear_trash %trash-empty
cmd restore_trash $trash-restore

# Open file in editor (new window)
cmd edit $setsid -f $TERMINAL -e $EDITOR "$f"

# progress in paste command
cmd paste &{{
    IFS='
'
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    printf "%s\n" "$@" | while read -r i; do
        case "$mode" in
            copy)
                rsync -av --ignore-existing --progress -- "$i" . |
                stdbuf -i0 -o0 -e0 tr '\r' '\n' |
                while IFS= read -r line; do
                    lf -remote "send $id echo $line"
                done
                ;;
            move) mv -n -- "$i" .;;
        esac
    done
    rm ~/.local/share/lf/files
    lf -remote "send clear"
}}


## BINDINGS ##

# Remove some defaults
map m
map n
map d
map c
map e

# cmd line mappings {{
cmap <backspace> cmd-delete-unix-word
# }}

# File Openers {{
map ee edit && lf -remote "send $id unselect"
map es $sudoedit "$f" && lf -remote "send $id unselect"
map ed ${{
	IFS='
' 
	nvim -d $fx && lf -remote "send $id unselect"
}}
map I $view "$f"
map o open
map O open_with
map cv $(lvim "$PWD")
map cd &(LF_LEVEL=0 $TERMINAL lf $PWD)
# }}

# Trash Mappings
map dd trash
map dc clear_trash
map dr restore_trash

# Basic Functions
map . set hidden!
map D delete
map p paste
map x cut
map y copy
map <enter> open
map <delete> trash
map mf new
map mr sudomkfile
map md mkdir
map ch chmod
map f fzf_jump
map r bulk-rename
map H top
map L bottom
map R reload; redraw
map C clear
map U unselect
map <m-up>    up
map <m-down>  down
map <m-1> open
map <m-2> updir
map <m-3> $$SHELL
map gi $lazygit .
map au autoratios
map ae extract
map zp set preview!
map <esc> cmd-escape
map W $setsid -f $TERMINAL >/dev/null 2>&1
map Y $printf "%s" "$fx" | wl-copy
map i $preview
map n dragndrop
map zd calcdirsize


## MOVEMENT ##

# Home
map gv cd ~/vids
map gp cd ~/pics
map gw cd ~/pics/wallpapers
map gd cd ~/docs
map gD cd ~/dloads
map gr cd ~/repos

# Uni
map gun cd ~/uni/
map gul cd ~/uni/libri
map gud cd ~/uni/anno2/database
map guf cd ~/uni/anno1/fisica
map gua cd ~/uni/anno3/asd2
map gui cd ~/uni/anno3/is
map guc cd ~/uni/anno3/crx

# System
map gbn cd ~/.local/bin
map gm cd /media
map gl cd ~/.local
map gc cd ~/.config
map gE cd /etc
map gU. cd /usr
map gUs cd /usr/share
map gtr cd ~/.local/share/Trash/files
map gus $lf -remote "send $id cd /run/media/$USER"

